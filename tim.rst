                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.0 #15242 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module tim
                                      6 	
                                      7 ;--------------------------------------------------------
                                      8 ; Public variables in this module
                                      9 ;--------------------------------------------------------
                                     10 	.globl _delay_1_sec
                                     11 	.globl _delay_1_ms
                                     12 	.globl _delay_ms
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 
                                     26 ; default segment ordering for linker
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area CONST
                                     31 	.area INITIALIZER
                                     32 	.area CODE
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	tim.c: 4: void delay_1_sec(void){
                                     51 ;	-----------------------------------------
                                     52 ;	 function delay_1_sec
                                     53 ;	-----------------------------------------
      008341                         54 _delay_1_sec:
                                     55 ;	tim.c: 5: uint8_t uif_flag = 0;
      008341 5F               [ 1]   56 	clrw	x
                                     57 ;	tim.c: 6: TIM2_CR1 = TIM2_CR1 & 0xFE;
      008342 72 11 53 00      [ 1]   58 	bres	0x5300, #0
                                     59 ;	tim.c: 7: TIM2_PSCR = 8; // 16 MHz / 256
      008346 35 08 53 0E      [ 1]   60 	mov	0x530e+0, #0x08
                                     61 ;	tim.c: 8: TIM2_ARRH = 0xF4;
      00834A 35 F4 53 0F      [ 1]   62 	mov	0x530f+0, #0xf4
                                     63 ;	tim.c: 9: TIM2_ARRL = 0x24;
      00834E 35 24 53 10      [ 1]   64 	mov	0x5310+0, #0x24
                                     65 ;	tim.c: 10: TIM2_SR1 = TIM2_SR1 & (0b11111110);
      008352 72 11 53 04      [ 1]   66 	bres	0x5304, #0
                                     67 ;	tim.c: 11: TIM2_CR1 = TIM2_CR1 | (0b00000001);
      008356 72 10 53 00      [ 1]   68 	bset	0x5300, #0
                                     69 ;	tim.c: 12: while(!(uif_flag)){
      00835A                         70 00101$:
      00835A 9F               [ 1]   71 	ld	a, xl
      00835B 4D               [ 1]   72 	tnz	a
      00835C 27 01            [ 1]   73 	jreq	00120$
      00835E 81               [ 4]   74 	ret
      00835F                         75 00120$:
                                     76 ;	tim.c: 13: uif_flag = TIM2_SR1 & (0b00000001);
      00835F C6 53 04         [ 1]   77 	ld	a, 0x5304
      008362 A4 01            [ 1]   78 	and	a, #0x01
      008364 97               [ 1]   79 	ld	xl, a
      008365 20 F3            [ 2]   80 	jra	00101$
                                     81 ;	tim.c: 15: }
      008367 81               [ 4]   82 	ret
                                     83 ;	tim.c: 17: void delay_1_ms(void){
                                     84 ;	-----------------------------------------
                                     85 ;	 function delay_1_ms
                                     86 ;	-----------------------------------------
      008368                         87 _delay_1_ms:
                                     88 ;	tim.c: 18: uint8_t uif_flag = 0;
      008368 5F               [ 1]   89 	clrw	x
                                     90 ;	tim.c: 19: TIM2_CR1 = TIM2_CR1 & 0xFE;
      008369 72 11 53 00      [ 1]   91 	bres	0x5300, #0
                                     92 ;	tim.c: 20: TIM2_PSCR = 1; 
      00836D 35 01 53 0E      [ 1]   93 	mov	0x530e+0, #0x01
                                     94 ;	tim.c: 21: TIM2_ARRH = 0x1F;
      008371 35 1F 53 0F      [ 1]   95 	mov	0x530f+0, #0x1f
                                     96 ;	tim.c: 22: TIM2_ARRL = 0x40;
      008375 35 40 53 10      [ 1]   97 	mov	0x5310+0, #0x40
                                     98 ;	tim.c: 23: TIM2_SR1 &= ~0x01;
      008379 72 11 53 04      [ 1]   99 	bres	0x5304, #0
                                    100 ;	tim.c: 24: TIM2_SR1 = TIM2_SR1 & (0b11111110);
      00837D 72 11 53 04      [ 1]  101 	bres	0x5304, #0
                                    102 ;	tim.c: 25: TIM2_CR1 = TIM2_CR1 | (0b00000001);
      008381 72 10 53 00      [ 1]  103 	bset	0x5300, #0
                                    104 ;	tim.c: 26: while(!(uif_flag)){
      008385                        105 00101$:
      008385 9F               [ 1]  106 	ld	a, xl
      008386 4D               [ 1]  107 	tnz	a
      008387 27 01            [ 1]  108 	jreq	00120$
      008389 81               [ 4]  109 	ret
      00838A                        110 00120$:
                                    111 ;	tim.c: 27: uif_flag = TIM2_SR1 & (0b00000001);
      00838A C6 53 04         [ 1]  112 	ld	a, 0x5304
      00838D A4 01            [ 1]  113 	and	a, #0x01
      00838F 97               [ 1]  114 	ld	xl, a
      008390 20 F3            [ 2]  115 	jra	00101$
                                    116 ;	tim.c: 29: }
      008392 81               [ 4]  117 	ret
                                    118 ;	tim.c: 31: void delay_ms(int ms){
                                    119 ;	-----------------------------------------
                                    120 ;	 function delay_ms
                                    121 ;	-----------------------------------------
      008393                        122 _delay_ms:
      008393 89               [ 2]  123 	pushw	x
                                    124 ;	tim.c: 33: for (i = 0; i < ms; i++){
      008394 5F               [ 1]  125 	clrw	x
      008395                        126 00103$:
      008395 13 01            [ 2]  127 	cpw	x, (0x01, sp)
      008397 2E 08            [ 1]  128 	jrsge	00105$
                                    129 ;	tim.c: 34: delay_1_ms();
      008399 89               [ 2]  130 	pushw	x
      00839A CD 83 68         [ 4]  131 	call	_delay_1_ms
      00839D 85               [ 2]  132 	popw	x
                                    133 ;	tim.c: 33: for (i = 0; i < ms; i++){
      00839E 5C               [ 1]  134 	incw	x
      00839F 20 F4            [ 2]  135 	jra	00103$
      0083A1                        136 00105$:
                                    137 ;	tim.c: 36: }
      0083A1 5B 02            [ 2]  138 	addw	sp, #2
      0083A3 81               [ 4]  139 	ret
                                    140 	.area CODE
                                    141 	.area CONST
                                    142 	.area INITIALIZER
                                    143 	.area CABS (ABS)
